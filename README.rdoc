=QEDProject
==Modern web project generator

QEDProject creates a simple web project skeleton with support for Sass and CoffeeScript
as well as asset packaging. It's a tool I wrote to make things easier for me, and
if you like it, I'd love to hear how you're using it.

== Usage

Generate a simple web project

    qedproject myproject
    
Generate a simple web project with CoffeeScript and Sass support, using Guard 
to monitor files for changes. Places outputs in public/javascripts and
public/stylesheets by default.

    qedproject myproject -c -s
    
While developing, use <tt>guard</tt> to update the files.
    
Generate a project that minifies CSS and JS files using Jammit. 
Creates the asset configuration file and a Guardfile.

    qedproject myproject -a
    
Create a project with CoffeeScript, Sass, and asset packaging support,
using Guard.

    qedproject myproject -c -s -a
    
== Including JavaScript libraries.

Create a new project using jQuery

    qedproject myproject -l jquery
    
Create a new project using jQuery and Backbone

    qedproject myproject -l jquery,backbone
    
Create a new project using jQuery, Backbone, jQery Templates, 
but also with Sass, CoffeeScript, and asset packaging.

    qedproject myproject -l jquery,backbone -c -s -a
    

= Testing with Jasmine

If you'd like to create projects where you can do Jasmine testing, use the <tt>-t</tt> flag.

    qedproject myproject -l jquery,backbone -c -s -a -t

This will create a suite.html file in the spec folder, and will create 
a sample spec. If you asked for CoffeeScript, the sample spec will be 
written in CoffeeSript and the Guardfile will be modified to convert specs to
js files.


= Building Plugins
Plugins should be gems that start with the prefix <tt>qedproject-</tt>.

Assuming we're making a plugin called "qedproject-prototype" 
for the Prototype library.

Make a structure like this:

    qedproject-prototype
      lib/
        plugins/
          prototype.rb
        qedproject-prototype.rb
        version.rb
     vendor/
       prototype/
         prototype.js

Then your code will look like this for the prototype.rb file:

    module QEDProject
      module Plugins
   
        class Prototype < QEDProject::Libraries::Base
    
          library :prototype, __FILE__
      
          set_js_files ["prototype.js"]
          #set_css_files  ["array", "of", "css", "files"]
          #set_image_files ["array", "of", "image", "files"]

          def generate!
             super
             # customizations of your own
             # if you have no customizations, just don't implement generate! at all.
          end
         end 
       
      end
    end
    
When your plugin is installed as a gem, QEDProject will detect it and attempt to load it. 
It will actually load the gem itself, so you don't necessarily have to create a plugin
with this - you could override any behavior you'd like.

= Contributing

Fork, send patches. Keep them small so I can pull them in.



= Changes
2011-09-07 - 0.0,8
  * Fixed output path for css generated by Jammit
  * made index creation optional with --skip-index option
  * made name of "public" folder configurable with -p or --public_dir option
  
2011-09-07 - 0.0.7
  * Added JQuery Mobile support
  * Refactored output 
  * Fixed issue with assets file extensions
  * Cleaned up tests

2011-09-03 - 0.0.6
  * Libraries can now have dependencies
  * Plugins can be developed as gems
  
2011-09-02 - 0.0.5
  * Fixed broken guardfile generation
  * Fixed indentation in generated files
  
2011-09-02 - 0.0.4
  * Index and Rakefile added
  * Fixed issue with bad libraries
  
2011-09-01 - 0.0.2
  * Birthday
  

= Licence:

MIT license
